import logging
import asyncio
import sys
import datetime
import sqlite3
import random


from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger


TOKEN = 
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")


bot = Bot(token=TOKEN)
dp = Dispatcher()


def create_connect():
    conn = sqlite3.connect("users.db")
    return conn


def create_tables():
    conn = create_connect()
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users(
            subscribed INT DEFAULT 0,
            category TEXT,
            users_id INT PRIMARY KEY
        );
    ''')
    conn.commit()
    conn.close()


create_connect()
create_tables()


def create_connect2():
    con = sqlite3.connect('quotes.db')
    return con


def create_tables2():
    con = create_connect2()
    cursor = con.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS quotes(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT NOT NULL,
            category TEXT
        );
    ''')
    con.commit()
    con.close()


create_connect2()
create_tables2()


admins = '8005742286'


class Create_Quote(StatesGroup):
    waiting_for_text = State()
    waiting_for_category = State()
class Wait_index(StatesGroup):
    waiting_for_index = State()


@dp.message(Command('create_quotes'))
async def create(message, state):
    if not admins:
        return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã:')
    await state.set_state(Create_Quote.waiting_for_text)


@dp.message(Create_Quote.waiting_for_text)
async def waiting_for_texts(message, state):
    text = message.text
    if text:
        await message.answer('‚úî –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω')
    else:
        await message.answer('–¢–µ–∫—Å—Ç–∞ –Ω–µ—Ç—É!')
        return
    await state.update_data(text=text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–∏—Ç–∞—Ç—ã:')
    await state.set_state(Create_Quote.waiting_for_category)


@dp.message(Create_Quote.waiting_for_category)
async def waiting_for_categories(message, state):
    category = message.text
    if category:
        await message.answer('‚úî –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω')
    else:
        await message.answer('–¢–µ–∫—Å—Ç–∞ –Ω–µ—Ç—É!')
        return
    await state.update_data(category=category)

    data = await state.get_data()
    text = data['text']
    category = data['category']
    await insert_quota(text, category)


async def insert_quota(text, category):
    con = create_connect2()
    cursor = con.cursor()

    cursor.execute('INSERT OR REPLACE INTO quotes (text, category) VALUES (?,?);', (text, category,))
    con.commit()
    con.close()


@dp.message(CommandStart())
async def cmd_start(message):
    await message.answer('üëã –ü—Ä–∏–≤–µ—Ç!\n'
                         '–Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–æ—Ç–∏–≤–∞—Ç–æ—Ä üí™\n'
                         '–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã, —á—Ç–æ–±—ã –∑–∞—Ä—è–¥–∏—Ç—å –¥–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–º –Ω–∞ —É—Å–ø–µ—Ö ‚òÄÔ∏è\n'
                         '–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n'
                         '‚ú® /quote ‚Äî –ø—Ä–∏—à–ª—é –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n'
                         'üìÖ /subscribe ‚Äî –≤–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É\n'
                         'üö´ /unsubscribe ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n'
                         'üìö /category ‚Äî –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–∏—Ç–∞—Ç (—É—Å–ø–µ—Ö, —Ä–∞–±–æ—Ç–∞, —Å–ø–æ—Ä—Ç –∏ –¥—Ä.)\n'
                         'üìö –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ù–∞–∂–∏–º–∞–π üëâ /subscribe –∏ –ø–æ–ª—É—á–∞–π –ø–µ—Ä–≤—ã–π –∑–∞—Ä—è–¥ —É–∂–µ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º!\n'
                         'üìö –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –∂–¥–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /quote\n')


@dp.message(Command('quote'))
async def send_quote(message):
    rows = await get_all_quotes()
    text = ''.join(random.choice(rows))
    await message.answer(f'{text}')


async def get_all_quotes():
    con = create_connect2()
    cursor = con.cursor()

    cursor.execute('SELECT text FROM quotes')
    rows = cursor.fetchall()

    con.commit()
    con.close()
    return rows


@dp.message(Command('subscribe'))
async def create_subscribe(message):
    users_id = message.from_user.id
    final_answer = 1
    await insert_subscribe(final_answer, users_id)
    await message.answer('–í–∫–ª—é—á–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —É—Ç—Ä–µ–Ω–Ω–µ—è —Ä–∞—Å—Å—ã–ª–∫–∞ (9:00)')
    await message.answer('–î–∞–ª–µ–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–∏—Ç–∞—Ç (/category)')


async def insert_subscribe(final_answer, users_id):
    conn = create_connect()
    cursor = conn.cursor()

    cursor.execute('INSERT OR REPLACE INTO users (subscribed, users_id) VALUES (?,?);', (final_answer, users_id,))

    conn.commit()
    conn.close()


@dp.message(Command('category'))
async def create_category(message, state):
    rows = await take_category()
    text = '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n'
    text += ''.join([f'\n{row[0]}. {row[1]} 'for r, row  in enumerate(rows)])
    await message.answer(text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    await state.set_state(Wait_index.waiting_for_index)


@dp.message(Wait_index.waiting_for_index)
async def wait_index_for_me(message, state):
    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')
        return

    index = int(message.text)
    users_id = message.from_user.id

    rows = await take_category()

    if index < 1 or index > len(rows):
        await message.answer('–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return

    category = rows[index - 1][1]

    await insert_category(category, users_id)
    await message.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {category}')
    await state.clear()
    return


async def insert_category(category, users_id):
    conn = create_connect()
    cursor = conn.cursor()

    cursor.execute('''
        UPDATE users SET category = ? WHERE users_id = ?
    ''', (category, users_id))

    if cursor.rowcount == 0:
        cursor.execute('''
            INSERT INTO users (category, users_id) VALUES (?, ?)
        ''', (category, users_id))

    conn.commit()
    conn.close()




async def take_category():
    con = create_connect2()
    cursor = con.cursor()

    cursor.execute('SELECT id ,category FROM quotes')
    rows = cursor.fetchall()

    con.commit()
    con.close()
    return rows


@dp.message(Command('unsubscribe'))
async def create_unsubscribe(message):
    users_id = message.from_user.id
    final_answer = 1
    await insert_subscribe(final_answer, users_id)
    await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!')


def get_subscribed_users():
    conn = create_connect()
    cursor = conn.cursor()
    cursor.execute("SELECT users_id, category FROM users WHERE subscribed = 1")
    users = cursor.fetchall()
    conn.close()
    return users


def get_random_quote_by_category(category):
    conn = create_connect2()
    cursor = conn.cursor()
    cursor.execute("SELECT text FROM quotes WHERE category = ?", (category,))
    quotes = cursor.fetchall()
    conn.close()
    if quotes:
        return random.choice(quotes)[0]
    else:
        return "–°–µ–≥–æ–¥–Ω—è –±–µ–∑ —Ü–∏—Ç–∞—Ç—ã. –î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ç–∞—Ç—ã –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!"


async def morning_quota():
    users = get_subscribed_users()
    for user_id, category in users:
        quota = get_random_quote_by_category(category=category)
        try:
            await bot.send_message(user_id, f'‚òÄ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n{quota}')
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


def setup_scheduler():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        morning_quota,
        CronTrigger(hour=12, minute=44),
        name="–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞"
    )
    scheduler.start()
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    setup_scheduler()
    await dp.start_polling(bot)
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç–∞ –≤—ã–∫–ª—é—á–∏–ª–∏...')
