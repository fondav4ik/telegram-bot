import asyncio
import logging
import sqlite3

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

TOKEN = '7525662677:AAESpQayGVVLMj5IkTzhVoQ1pJr9cRxctjA'
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
bot = Bot(token=TOKEN)
dp = Dispatcher()
#CREATE STATE
class States(StatesGroup):
    answer1 = State()
    answer2 = State()
    answer3 = State()
    answer4 = State()
    answer5 = State()
    answer6 = State()
    waiting_for_contact = State()
    start = State()
class Search(StatesGroup):
    choosing_param = State()
    entering_value = State()
    confirm_search = State()
class Cars(StatesGroup):
    viewing = State()
#CREATE TABLE
def create_connect():
    conn = sqlite3.connect('sell_carr')
    return conn
def create_tables():
    conn = create_connect()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cars(
        car_id INTEGER PRIMARY KEY,
        car_brand TEXT NOT NULL,
        car_model TEXT NOT NULL,
        car_years INT NOT NULL,
        car_mileage INT NOT NULL,
        car_engine_type TEXT NOT NULL,
        car_city TEXT NOT NULL,
        number INT NOT NULL,
        telegram TEXT NOT NULL,
        my_id INT NOT NULL
        );
    ''')
#CREATE FUNC IN TABLE
async def insert_message(car_brand, car_model, car_years, car_mileage, car_engine_type, car_city, number, telegram, my_id):
    conn = create_connect()
    cursor = conn.cursor()
    cursor.execute('''INSERT OR REPLACE INTO cars (car_brand, car_model, car_years, car_mileage, car_engine_type, car_city, number, telegram, my_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);
    ''', (car_brand, car_model, car_years, car_mileage, car_engine_type, car_city, number, telegram, my_id))
    conn.commit()
    conn.close()
async def get_message():
    conn = create_connect()
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM cars')
    rows = cursor.fetchall()

    conn.close()
    return rows
async def get_info_for_text():
    conn = create_connect()
    cursor = conn.cursor()

    cursor.execute('SELECT car_brand, car_model, car_years, car_mileage, car_engine_type, car_city FROM cars')
    rows = cursor.fetchall()

    conn.close()
    return rows
async def get_my_news(my_id):
    conn = create_connect()
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM cars WHERE my_id = ?', (my_id,))
    rows = cursor.fetchall()

    conn.close()
    return rows
async def get_car_id():
    conn = create_connect()
    cursor = conn.cursor()

    cursor.execute('SELECT car_id FROM CARS')
    rows = cursor.fetchall()
    conn.close()
    return rows
async def get_news_by_param(param_name: str,param_value: str):
    conn = create_connect()
    cursor = conn.cursor()
    query = f'SELECT * FROM cars WHERE {param_name} = ?'
    cursor.execute(query,(param_value,))
    rows = cursor.fetchall()

    conn.close()
    return rows
async def search_with_multiple_params(filters: dict):
    conn = create_connect()
    cursor = conn.cursor()

    query = "SELECT * FROM cars WHERE "
    query += " AND ".join([f"{k} = ?" for k in filters.keys()])
    values = list(filters.values())

    cursor.execute(query, values)
    rows = cursor.fetchall()
    conn.close()
    return rows
#CALL CREATE DATABASE, TABLES in DATABASE
create_connect()
create_tables()
#create translate for table
PARAM_TRANSLATIONS = {
    "car_brand": "–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
    "car_model": "–ú–æ–¥–µ–ª—å",
    "car_years": "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
    "car_city": "–ì–æ—Ä–æ–¥",
    "car_engine_type": "–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è",
}

#CREATE KEYBOARD BUTTON FOR START
kb = {
    'kb_start': InlineKeyboardMarkup(inline_keyboard=[
                                     [InlineKeyboardButton(text='–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',callback_data='new_news')],
                                     [InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ',callback_data='views_car')],
                                     [InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º',callback_data='find_values')],
                                     [InlineKeyboardButton(text='–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',callback_data='my_news')]
                                      ]),
    'send_contact': ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text='üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    ),
    'back': InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back')]
    ]),
    'param_keyboard': InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ú–∞—Ä–∫–∞ –ê–≤—Ç–æ–º–æ–±–∏–ª—è', callback_data='car_brand')],
        [InlineKeyboardButton(text='–ú–æ–¥–µ–ª—å', callback_data='car_model')],
        [InlineKeyboardButton(text='–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞', callback_data='car_years')],
        [InlineKeyboardButton(text='–ü—Ä–æ–±–µ–≥', callback_data='car_mileage')],
        [InlineKeyboardButton(text='–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è', callback_data='car_engine_type')],
        [InlineKeyboardButton(text='–û—Ç–∫—É–¥–∞ –ø—Ä–æ–¥–∞–µ—Ç—Å—è', callback_data='car_city')]
    ]),
    'confirm_keyboard': InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø–∞—Ä–∞–º–µ—Ç—Ä', callback_data='add_more')],
        [InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', callback_data='search')]
    ]),
}
#go back
async def go_back(message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb['kb_start'])
#FIST COMMAND START
@dp.message(CommandStart())
async def cmd_start(message):
    await message.answer('–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞üëã', reply_markup=kb['kb_start'])
#CREATE HANDLER 'new_news'
@dp.callback_query(F.data == 'new_news')
async def create_broadcast(callback, state):
    await callback.message.answer('–ß—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤–∞–º –Ω—É–∂–Ω–æ:\n'
                                  '–ü–æ—à–∞–≥–æ–≤–æ –≤–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:\n')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ ')
    await state.set_state(States.answer1)
    await callback.answer()
#fill 1 field 'brand car'
@dp.message(States.answer1)
async def filling_brand_field(message, state):
    await state.update_data(car_brand=message.text)
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å {message.text}')
    await state.set_state(States.answer2)
#fill 2 field 'model car'
@dp.message(States.answer2)
async def filling_mode_field(message, state):
    await state.update_data(car_model=message.text)
    data = await state.get_data()
    car_brand = data['car_brand']
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ {car_brand}')
    await state.set_state(States.answer3)
#fill 3 field 'years_car'
@dp.message(States.answer3)
async def filling_years_field(message, state):
    await state.update_data(car_years=message.text)
    data = await state.get_data()
    car_brand = data['car_brand']
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ {car_brand}')
    await state.set_state(States.answer4)
#fill 4 field 'car_mileage'
@dp.message(States.answer4)
async def filling_mileage_field(message, state):
    await state.update_data(car_mileage=message.text)
    data = await state.get_data()
    car_brand = data['car_brand']
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è {car_brand}')
    await state.set_state(States.answer5)
#fill 4 field car_type_engine
@dp.message(States.answer5)
async def filling_car_type_engine_field(message, state):
    await state.update_data(car_engine_type=message.text)
    data = await state.get_data()
    car_brand = data['car_brand']
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–∫—É–¥–∞ –ø—Ä–æ–¥–∞–µ—Ç–µ –∞–≤—Ç–æ')
    await state.set_state(States.answer6)
#fill 5 field city_car
@dp.message(States.answer6)
async def filling_car_city_field(message, state):
    await state.update_data(car_city=message.text)
    data = await state.get_data()
    car_brand = data['car_brand']
    car_model = data['car_model']
    car_years = data['car_years']
    car_mileage = data['car_mileage']
    car_engine_type = data['car_engine_type']
    car_city = data['car_city']
    await message.answer(f'–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ:\n'
                         f'–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {car_brand}\n'
                         f'–ú–æ–¥–µ–ª—å: {car_model}\n'
                         f'–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {car_years}\n'
                         f'–ü—Ä–æ–±–µ–≥: {car_mileage}\n'
                         f'–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car_engine_type}\n'
                         f'–ì–æ—Ä–æ–¥: {car_city}\n')
    await message.answer('üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', reply_markup=kb['send_contact'])
    await state.set_state(States.waiting_for_contact)
#handler wait for contact
@dp.message(States.waiting_for_contact)
async def wait_contact(message, state):
    if not message.contact:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç¬ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞.")
        return
    data = await state.get_data()

    number = message.contact.phone_number
    telegram = message.from_user.username or None
    my_id = message.from_user.id
    await insert_message(
        car_brand=data['car_brand'].lower().strip(),
        car_model=data['car_model'].lower().strip(),
        car_years=data['car_years'].lower().strip(),
        car_mileage=data['car_mileage'].lower().strip(),
        car_engine_type=data['car_engine_type'].lower().strip(),
        car_city=data['car_city'].lower().strip(),
        number=number,
        telegram=telegram.lower(),
        my_id=my_id
    )

    await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ üôå", reply_markup=ReplyKeyboardRemove())
    await message.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüòº:', reply_markup=kb['back'])
    await state.clear()
#handler for exit on main
@dp.callback_query(F.data == 'back')
async def back(callback):
    await go_back(callback.message)
    await callback.answer()
#create handler for my_news
@dp.callback_query(F.data == 'my_news')
async def my_news(callback):
    my_id = callback.from_user.id
    rows = await get_my_news(my_id)

    if rows:
        text = "\n\n".join(
            [f"–û–±—ä—è–≤–ª–µ–Ω–∏—è:\nüöó –ú–∞—Ä–∫–∞: {r[1]}\nüìç –ú–æ–¥–µ–ª—å: {r[2]}\nüìÖ –ì–æ–¥: {r[3]}" for i, r in enumerate(rows)]
        )
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π."

    await callback.message.answer(text)
    await callback.answer()
#create "find by parametrs"
@dp.callback_query(F.data == 'find_values')
async def find_values(callback, state):
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å:', reply_markup=kb['param_keyboard'])
    await state.set_state(Search.choosing_param)
#state confirm_search
@dp.callback_query(Search.choosing_param, F.data.in_(['car_brand', 'car_model', 'car_years', 'car_mileage', 'car_engine_type', 'car_city']))
async def choose_param(callback, state):
    param = callback.data
    await state.update_data(current_param=param)
    pretty_name = PARAM_TRANSLATIONS.get(param, param)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {pretty_name}:")
    await state.set_state(Search.entering_value)
    await callback.answer()
#state entering_value
@dp.message(Search.entering_value)
async def entering_value(message,state):
    data = await state.get_data()
    current_param = data['current_param']

    filters = data.get('filters', {})
    filters[current_param] = message.text.lower()
    await state.update_data(filters=filters)
    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–ª–∏ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫?", reply_markup=kb['confirm_keyboard'])
    await state.set_state(Search.confirm_search)
#state confirm_search
@dp.callback_query(Search.confirm_search)
async def confirm_search(callback, state):
    global url
    if callback.data == 'search':
        data = await state.update_data()
        filters = data.get('filters', {})

        rowse = await get_message()
        for row in rowse:
            telegram = row[8]

        numbers = await get_message()
        for number in numbers:
            num = number[7]

        rows = await search_with_multiple_params(filters)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å', callback_data='telegrams')]
        ])
        number_phone = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data='telephone')]
        ])
        all_buttons = keyboard.inline_keyboard + number_phone.inline_keyboard
        keyboard_global = InlineKeyboardMarkup(inline_keyboard=all_buttons)
        if not rows:
            await callback.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            text = "\n\n".join([f"üöó {r[1]} {r[2]} | {r[3]} –≥–æ–¥ | {r[6]}" for r in rows])
            await callback.message.answer(f"üîç –ù–∞–π–¥–µ–Ω–æ:\n\n{text}", reply_markup=keyboard_global)
            @dp.callback_query(F.data == 'telephone')
            async def telephone(callback):
                await callback.message.answer(f"üîç –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{num}",reply_markup=kb['back'])
                await callback.answer()
            @dp.callback_query(F.data == 'telegrams')
            async def telegrams(callback):
                await callback.message.answer(f"üîç –¢–µ–ª–µ–≥—Ä–∞–º: <a href='https://t.me/{telegram}'>–Ω–∞–∂–º–∏ —á—Ç–æ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å!</a>",parse_mode='html', disable_web_page_preview=True, reply_markup=kb['back'])
                await callback.answer()
        await state.clear()

    elif callback.data == 'add_more':
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä:", reply_markup=kb['param_keyboard'])
        await state.set_state(Search.choosing_param)
    await callback.answer()
#realizate 2 button (views auto)
@dp.callback_query(F.data == 'views_car')
async def start_viewing(callback, state):
    await state.set_state(Cars.viewing)
    await state.update_data(index=0)
    await show_car(callback, 0)
async def show_car(message, index: int):
    cars = await get_info_for_text()


    if index >= len(cars):
        await message.answer('üö´ –ë–æ–ª—å—à–µ –º–∞—à–∏–Ω –Ω–µ—Ç.')
        return
    car = cars[index]
    text = (
        f"üöò –ú–∞—Ä–∫–∞: {car[0]}\n"
        f"üìç –ú–æ–¥–µ–ª—å: {car[1]}\n"
        f"üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {car[2]}\n"
        f"üìä –ü—Ä–æ–±–µ–≥: {car[3]} –∫–º\n"
        f"‚öôÔ∏è –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car[4]}\n"
        f"üèô –ì–æ—Ä–æ–¥: {car[5]}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚û°Ô∏è –î–∞–ª—å—à–µ', callback_data=f"next_{index + 1}")],
        [InlineKeyboardButton(text='‚õîÔ∏è –°—Ç–æ–ø', callback_data='stop')]
    ])
    await message.answer(text, reply_markup=keyboard)
@dp.callback_query(F.data.startswith("next_"))
async def next_car(callback, state):
    index = int(callback.data.split('_')[1])
    await state.update_data(index=index)
    await show_car(callback.message, index)
    await callback.answer()
@dp.callback_query(F.data == 'stop')
async def stop(callback, state):
    await state.clear()
    await callback.message.answer("üîö –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await callback.answer()

#create bot
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç–∞ –≤—ã–∫–ª—é—á–∏–ª–∏...')
