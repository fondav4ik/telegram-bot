import logging
import asyncio
import sys
import datetime
import sqlite3
import random

from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

TOKEN = 

def create_connect():
    conn = sqlite3.connect('quotes_.db')
    return conn

def create_table():
    conn = create_connect()
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS quotes(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INT,
        quota TEXT
        );''')
    conn.commit()
    conn.close()

async def insert_message(user_id,qouta):
    conn = create_connect()
    cursor = conn.cursor()
    cursor.execute(''' INSERT INTO quotes (user_id ,quota) VALUES (?,?);''', (user_id, qouta,))
    conn.commit()
    conn.close()
create_connect()
create_table()

kb = {

}

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")

bot = Bot(token=TOKEN)
dp = Dispatcher()

class States(StatesGroup):
    waiting_qouta = State()
    wait_answer = State()

@dp.message(CommandStart())
async def cmd_start(message, state):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø QuoteSaverBot ü§ñ\n\n'
        'üìå –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –ª—é–±—É—é —Ü–∏—Ç–∞—Ç—É ‚Äî —è –µ—ë —Å–æ—Ö—Ä–∞–Ω—é.\n\n'
        'üîé /qoutes ‚Äî —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç\n'
        'üé≤ /random ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞\n'
        'üßπ /clear ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ\n'
    )
    await state.set_state(States.waiting_qouta)
@dp.message(States.waiting_qouta)
async def qouta_create(message, state):
    qouta = message.text
    user_id = int(message.from_user.id)
    await state.update_data(user_id=user_id)
    print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç user_id: {user_id}")
    await insert_message(user_id ,qouta)
    await message.answer('‚úÖ –¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
    await state.clear()
@dp.message(Command('qoutes'))
async def debug_db(message: Message):
    conn = create_connect()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM quotes WHERE user_id = ?", (message.from_user.id,))
    rows = cursor.fetchall()
    cursor.close()
    conn.close()

    if not rows:
        await message.answer("‚ùå –¶–∏—Ç–∞—Ç –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        msg = "\n".join([f"üÜî {r[0]} | {r[2]}" for r in rows])
        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ:\n{msg}")
@dp.message(Command('random'))
async def randoms_qoutes(message):
    user_id = message.from_user.id
    rows = await get_all_qoutes(user_id)
    if not rows:
        await message.answer("‚ùå –¶–∏—Ç–∞—Ç –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        quota = random.choice(rows)
        await message.answer(f'üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞:\n {quota}')
async def get_all_qoutes(user_id):
    conn = create_connect()
    cursor = conn.cursor()

    cursor.execute('SELECT quota FROM quotes WHERE user_id = ?', (user_id,))
    rows = cursor.fetchall()

    cursor.close()
    conn.close()
    return [row[0] for row in rows]
@dp.message(Command('clear'))
async def clears(message: Message, state: FSMContext):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="clear_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="clear_no")]
        ]
    )
    await message.answer("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ü–∏—Ç–∞—Ç—ã?", reply_markup=kb)
@dp.callback_query(F.data == 'clear_yes')
async def clear_yess(callback: CallbackQuery):
    user_id = callback.from_user.id
    print(f"–£–¥–∞–ª—è–µ–º —Ü–∏—Ç–∞—Ç—ã –¥–ª—è user_id: {user_id}")
    await callback.message.answer('–£–¥–∞–ª—è–µ–º..')
    await del_qouta(user_id)
    await callback.answer()
@dp.callback_query(F.data == 'clear_no')
async def clear_noo(callback):
    await callback.message.answer('–í–æ–≤–∑—Ä–∞—â–∞–µ–º...')
    await callback.answer()
    return
    
async def del_qouta(user_id):
    conn = create_connect()
    cursor = conn.cursor()

    cursor.execute('DELETE FROM quotes WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç–∞ –≤—ã–∫–ª—é—á–∏–ª–∏...')
